from aiogram import types, Dispatcher
from aiogram.utils.exceptions import BotBlocked, ChatNotFound, MessageCantBeDeleted
from create_bot import bot
from keyboard import kb_client
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from libs import get_weather, WalletParser


# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–æ–≥–æ–¥—ã
class FSMweather(StatesGroup):
    place = State()


# –°—Ç–∞—Ä—Ç
async def commands_start(message: types.Message):
    sticker = open('static/welcome.webp', 'rb')
    welcome_mesg = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!–ú–µ–Ω—è –∑–æ–≤—É—Ç AboBot!\n–Ø –º–æ–≥—É —É–∑–Ω–∞–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç!"
    help_mesg = "–ü–æ–º–æ—â—å:\nüîò–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É: '–ü–æ–≥–æ–¥–∞ –≥–æ—Ä–æ–¥' –∏–ª–∏ '–ü–æ–≥–æ–¥–∞'.\nüîò–£–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç : '–ö—É—Ä—Å " \
                "–≤–∞–ª—é—Ç'. "
    mesg = welcome_mesg if message.text == '/start' else help_mesg
    try:
        if mesg == welcome_mesg:
            await bot.send_sticker(message.from_user.id, sticker)
        await bot.send_message(message.from_user.id, mesg, reply_markup=kb_client)
        try:
            await message.delete()
        except MessageCantBeDeleted:
            print('Cant delete, not a administrator')
    except ChatNotFound:
        await message.reply("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –õ–°!")
    except BotBlocked:
        await message.reply("–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –º–µ–Ω—è, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥!")


# –ö—É—Ä—Å –≤–∞–ª—é—Ç
async def command_wallet(message: types.Message):
    wallet = WalletParser()
    mesg = await message.reply('–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...üïí')
    await bot.edit_message_text(chat_id=message.chat.id, message_id=mesg.message_id, text=wallet.get_currency())


# –ü–æ–≥–æ–¥–∞
async def weather_start(message: types.Message):
    await FSMweather.place.set()
    await message.reply('–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ!üåç', reply_markup=ReplyKeyboardRemove())


async def weather_next(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['place'] = message.text
        ans = get_weather(data['place'])
        await message.reply(ans)
        await state.finish()


async def weather(message: types.Message):
    place = message.text[7:]
    # print(place)
    await message.reply(get_weather(place))


def register_handlers_client(_dp: Dispatcher):
    _dp.register_message_handler(commands_start, commands=['start', 'help'])
    _dp.register_message_handler(command_wallet, lambda message: "–∫—É—Ä—Å –≤–∞–ª—é—Ç" in message.text.lower())
    _dp.register_message_handler(weather_start, lambda message: message.text.lower() == '–ø–æ–≥–æ–¥–∞', state=None)
    _dp.register_message_handler(weather_next, state=FSMweather.place)
    _dp.register_message_handler(weather, lambda message: message.text.lower().startswith('–ø–æ–≥–æ–¥–∞ '))
