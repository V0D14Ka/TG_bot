from aiogram import types, Dispatcher
from aiogram.utils.exceptions import BotBlocked, ChatNotFound
from create_bot import bot
from keyboard import kb_client
# from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from libs import get_weather


class FSMweather(StatesGroup):
    place = State()


async def command_start(message: types.Message):
    try:
        sticker = open('static/welcome.webp', 'rb')
        await bot.send_sticker(message.from_user.id, sticker)
        await bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!–ú–µ–Ω—è –∑–æ–≤—É—Ç AboBot!\n–Ø –º–æ–≥—É —É–∑–Ω–∞–≤–∞—Ç—å –ø–æ–≥–æ–¥—É.",
                               reply_markup=kb_client)
        await message.delete()
    except ChatNotFound:
        await message.reply("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –õ–°!")
    except BotBlocked:
        await message.reply("–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –º–µ–Ω—è, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥!")


# –ü–æ–≥–æ–¥–∞
async def weather_start(message: types.Message):
    await FSMweather.place.set()
    await message.reply('–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ!üåç')


async def weather_next(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['place'] = message.text
        ans = get_weather(data['place'])
        await message.reply(ans)
        await state.finish()


def register_handlers_client(_dp: Dispatcher):
    _dp.register_message_handler(command_start, commands=['start', 'help'])
    _dp.register_message_handler(weather_start, commands=['–ü–æ–≥–æ–¥–∞'], state=None)
    _dp.register_message_handler(weather_next, state=FSMweather.place)
